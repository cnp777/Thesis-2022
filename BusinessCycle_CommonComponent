import numpy as np
from scipy import linalg
import sys

def get_coefficients_sv(yy_monthly, yy_quarterly, s_t, param_macro_MH: dict, param_macro_gibbs: dict):
    """Function to compute state-space matrices.
    The state-space form:
    # YY(t) = H0 + H1*x(t) + e(t)     (measurement equation)
    # x(t)  = F0 + F1*x(t-1) + v(t)   (state-transition equation)
    # Var(e(t)) = RR;
    # Var(v(t)) = Q
    """

    T, N_m = np.shape(yy_monthly)[0], np.shape(yy_monthly)[1]
    T_q, N_q = np.shape(yy_quarterly)[0], np.shape(yy_quarterly)[1]

    tau = 5 # sum of monthly macro growth to generate qrt macro growth

    # Specify parameters
    gamma_macro_m = param_macro_gibbs['gamma_macro_m']
    SIG2_i_macro_m = param_macro_gibbs['SIG2_i_macro_m']
    psi_macro_m = param_macro_gibbs['psi_macro_m']

    # Quarterly data
    gamma_macro_q = param_macro_gibbs['gamma_macro_q']
    SIG2_i_macro_q = param_macro_gibbs['SIG2_i_macro_q']
    psi_macro_q = param_macro_gibbs['psi_macro_q']

    # Parameters associated with the Common Component
    paramMU = param_macro_MH['paramMU']
    Sigma2_0_cc = param_macro_MH['Sigma2_0_cc']
    h_cc = param_macro_MH['h_cc']
    phi_cc = param_macro_MH['phi_cc']

    ################################
    ##  The measurement equation  ##
    ################################
    # YY(t) = A_{t}(H0 + H1*S(t) + e(t))

    # if t is the last month of the quarter
    tau_aux = np.asarray([x for x in range(1, 6)]) / 3  # 5x1

    mDim = N_m + N_q * tau + 6
    nStates_Y = N_m + N_q * tau

    A_last = np.concatenate([np.concatenate([np.eye(N_m), np.zeros((N_m, N_q * tau))], axis=1),
                             np.concatenate([np.zeros((N_q, N_m)), np.kron(np.eye(N_q), tau_aux)], axis=1)], axis=0)
    #  A_last.shape should be (15,27)

    A_NotLast = np.concatenate([np.eye(N_m), np.zeros((N_m, N_q * tau))], axis=1)
    # print(A_NotLast.shape)  # shape should be (12, 27)
    A_select = {'A_last': A_last, 'A_NotLast': A_NotLast}

    ##########
    #   H0   #
    ##########
    H0 = np.zeros((nStates_Y, 1))

    ##########
    #   H1   #
    ##########

    # H1 associated with monthly Macro variables
    gamma_f = gamma_macro_m[0:-4]  # shape should be (11,1)
    gamma_l = gamma_macro_m[-4:]   # shape should be (4,1)

    psi_1_f = psi_macro_m[0:-1]  # shape should be (11,1)
    psi_1_l = psi_macro_m[-1]    # shape should be (1,1)

    # Build auxiliary variables for the N'th observation for the macro variables
    gamma_0_l = gamma_l[0]
    gamma_1_l = gamma_l[1] - psi_1_l * gamma_l[0]
    gamma_2_l = gamma_l[2] - psi_1_l * gamma_l[1]
    gamma_3_l = gamma_l[3] - psi_1_l * gamma_l[2]
    gamma_4_l = - psi_1_l * gamma_l[3]

    H1_f = np.concatenate((gamma_f, np.multiply(- gamma_f, psi_1_f)), axis=1)
    H1_l = np.column_stack((gamma_0_l, gamma_1_l, gamma_2_l, gamma_3_l, gamma_4_l))
    # H1_f.shape should be (11, 2)
    # H1_l.shape should be (1, 5)

    H1_macro_m_aux1 = np.concatenate(
        (np.concatenate((H1_f, np.zeros((N_m - 1, 4))), axis=1), np.hstack((H1_l, np.asmatrix([0])))), axis=0)
    H1_macro_m_aux2 = np.eye(N_m)
    H1_macro_m = np.concatenate((H1_macro_m_aux1, H1_macro_m_aux2, np.zeros((N_m, N_q * len(tau_aux)))), axis=1)
    # H1_macro_m.shape should be (12, 33)

    ### H1 associated with quarterly Macro variables
    gamma_q = gamma_macro_q[0:]  # shape should be (3,1)
    psi_1_q = psi_macro_q[0:]  # shape should be (3,1)
    gamma_psi = (-gamma_q) * psi_1_q  # shape should be (3,1)
    auxVar = np.hstack((gamma_q, gamma_psi))  # shape should be (3,2)

    H1_macro_q_1 = []

    for index_q in range(0, N_q):
        aux1 = auxVar[index_q, :]
        mat_aux1 = np.zeros((len(tau_aux), 6))

        for ii in range(0, len(tau_aux)):
            mat_aux1[ii, ii] = aux1[0]
        for jj in range(0, 5):
            mat_aux1[jj, jj + 1] = aux1[1]

        if index_q == 0:
            H1_macro_q_1.append(mat_aux1)
            H1_macro_q_1 = np.asarray(H1_macro_q_1).reshape(mat_aux1.shape[0], mat_aux1.shape[1])
        else:
            H1_macro_q_1 = np.concatenate((H1_macro_q_1, mat_aux1), axis=0)

    H1_macro_q_2 = np.zeros((len(tau_aux) * N_q, N_m))
    H1_macro_q_3 = np.kron(np.eye(N_q), np.eye(len(tau_aux)))
    H1_macro_q = np.concatenate([H1_macro_q_1, H1_macro_q_2, H1_macro_q_3], axis=1)

    # Collect monthly and quarterly
    H1 = np.vstack((H1_macro_m, H1_macro_q))

    # print(H1_macro_q_1.shape)  # shape should be (15, 6)
    # print(H1_macro_q_2.shape)  # shape should be (15, 12)
    # print(H1_macro_q_3.shape)  # shape should be (15, 15)
    # print(H1_macro_q.shape)    # shape should be (15,33)
    # print(H1.shape)            # shape should be (27, 33)

    ##########
    #   RR   #
    ##########
    RR = np.zeros((nStates_Y, nStates_Y))

    #########################################
    ##    The state-transition equation    ##
    #########################################
    # x(t)  = F0 + F1*x(t-1) + v(t)
    nDim = H1.shape[1]

    ##########
    #   F0   #
    ##########
    mu_0 = paramMU[0, 0]
    mu_1 = paramMU[1, 0]
    mu_aux = mu_0 + mu_1 * s_t
    mu_t = mu_aux[1:] - phi_cc * mu_aux[0:-1]

    F0_t = np.vstack((mu_t.T, np.zeros((mDim - 1, len(mu_t)))))

    # print(mu_aux.shape) 
    # print(mu_t.shape)   
    # print(F0_t.shape)   

    ##########
    #   F1   #
    ##########
    F1 = np.zeros((nDim, nDim))
    F1[0, 0] = phi_cc
    F1[1: (tau + 1), 0: tau] = np.eye(tau)

    ##########
    #    Q   #
    ##########
    Sigma2_t = Sigma2_0_cc * (1 + h_cc * s_t) 
    Q_t = np.zeros((T, nDim, nDim))  # 3D matrix: T matrices of size nDim x nDim
    Q_t[:, 0, 0] = Sigma2_t.reshape(len(Sigma2_t))
    # fill in left upper corner in each of the T matrices

    # Fill in diagonal of each T-layer matrix
    jjj = 0
    for kk in range(6, 6 + N_m):
        Q_t[:, kk, kk] = np.tile(SIG2_i_macro_m[jjj], T)
        jjj += 1
    jjj = 0
    for kk in range(6 + N_m, 6 + (N_m + N_q * 5), 5):
        Q_t[:, kk, kk] = np.tile(SIG2_i_macro_q[jjj], T)
        jjj += 1

    ##############################
    #  Adjust Data and matrices  #
    ##############################

    psi_1_m = psi_macro_m
    psi_1_q = psi_macro_q

    yy_star_m = yy_monthly[1:, :] - np.tile(psi_1_m.T, (T - 1, 1)) * yy_monthly[0:-1]
    yy_star_q = yy_quarterly[3:] - np.tile(psi_1_q.T, (T - 3, 1)) * yy_quarterly[0:-3, :]

    Ystar_m = np.asmatrix(yy_star_m[2:])  
    Ystar_q = np.asmatrix(yy_star_q)      

    Ystar = np.hstack((Ystar_m, Ystar_q))

    Tstar = len(Ystar)

    Q_t = Q_t[-Tstar:, :, :]
    # get the Tstar latest layers
    # 3d matrix: Tstar layers of 2D (nDim x nDim) matrices

    F0_t = F0_t[:, -Tstar:]

    return Ystar, H0, H1, RR, F0_t, F1, Q_t, A_select, Ystar_m, Ystar_q


def generate_xt_sv(yy_monthly, yy_quarterly, s_t, param_macro_MH, param_macro_gibbs, indexQuarter):
    Ystar, H0, H1, RR, F0_t, F1, Q_t, A_select, Ystar_m, Ystar_q = get_coefficients_sv(yy_monthly, yy_quarterly, s_t,
                                                                                       param_macro_MH,
                                                                                       param_macro_gibbs)

    A_last = A_select['A_last']
    A_NotLast = A_select['A_NotLast']
    Tstar, nVars = np.shape(Ystar)[0], np.shape(Ystar)[1]

    # Storage
    mDim = F1.shape[0]  
    At_mat = np.zeros((Tstar, mDim))
    At_pred = np.zeros((Tstar, mDim))
    Pt_mat = np.zeros((Tstar, mDim ** 2))
    At_draw = np.zeros((Tstar, mDim))

    # Initialize
    loglh = 0
    # take the mean of the third dimension of Q_t, i.e. of the layers
    # should return a 2D matrix of size (nDim x nDim)
    Qt_mean = np.mean(Q_t, axis=0)  # nDim x nDim
    Pt = linalg.solve_discrete_lyapunov(F1, Qt_mean)
    At = np.asmatrix(np.mean(F0_t, axis=1)).T
    # Kim (1999) page 26: For stationary beta_t (A_t here) the unconditional mean and covariance matrix may be employed as the initial values

    for t in range(0, Tstar):
        if indexQuarter[t] == 1:  # meaning we are in the last month of the quarter
            A_t = A_last
            H0_A = A_t @ H0
            H1_A = A_t @ H1
            RR_A = A_t @ RR @ A_t.T
            nVars = H0_A.shape[0]

            y_t = np.vstack((Ystar_m[t, :].T, Ystar_q[t, :].T))

        else:  # if indexQuarter[t]==0:  # meaning month 1 or 2 of the quarter
            A_t = A_NotLast  # shape should be (12, 27)
            H0_A = A_t @ H0
            H1_A = A_t @ H1
            RR_A = A_t @ RR @ A_t.T  # shape should be (12, 12)
            nVars = H0_A.shape[0]

            y_t = Ystar_m[t, :].T  # shape should be (12, 1)

        # Check for missing values
        indexData = ~np.isnan(y_t.T)
        nVars_t = sum(indexData.tolist()[0])
        # sum(indexData) = 3, meaning 3 columns with no missing values
        AdjM = np.eye(nVars)
        AdjM = AdjM[indexData.tolist()[0]]  # remove rows with missing values
        # .tolist()[0] makes the format compatible with python indexing

        H0_M = AdjM @ H0_A  # (3, 12) @ (12,1)
        H1_M = AdjM @ H1_A  # (3, 12) @ (12, 33)
        RR_M = AdjM @ RR_A @ AdjM.T  # shape = (3, 3)
        y_t = np.asmatrix(y_t[indexData.tolist()[0]])  

        At1 = At  # should be (33, 1)
        Pt1 = Pt

        F0 = np.asmatrix(F0_t[:, t]).T  # should be (33, 1)
        Q = Q_t[t, :, :]  # should be (33, 33)

        ### Prediction
        alpha_hat = F0 + F1 @ At1  # (33, 1)
        P_hat = F1 @ Pt1 @ F1.T + Q  # (33, 33)
        P_hat = 0.5 * (P_hat + P_hat.T)  # (33, 33)

        y_hat = H0_M + H1_M @ alpha_hat
        nu_t = y_t - y_hat

        Ft = H1_M @ P_hat @ H1_M.T + RR_M
        Ft = 0.5 * (Ft + Ft.T)

        invFt = linalg.solve(Ft, np.eye(nVars_t))
        loglh = loglh - 0.5 * nVars_t * np.log(2 * np.pi) - 0.5 * np.log(linalg.det(Ft)) - 0.5 * nu_t.T @ invFt @ nu_t
        loglh = np.real(loglh)

        Phat_h1 = P_hat @ H1_M.T  # shape should be (33, 3)

        ### Updating
        At = alpha_hat + Phat_h1 @ invFt @ nu_t  # shape should be (33, 1)
        Pt = P_hat - Phat_h1 @ invFt @ Phat_h1.T
        Pt_mat[t, :] = Pt.reshape(1, mDim ** 2)

        At_mat[t, :] = At.T
        At_pred[t, :] = alpha_hat.T

        U, s, Vh = linalg.svd(Pt.reshape(mDim, mDim))
        # NOTE: python calculates S differently than Matlab, python only returns the S diagonal and not the full matrix. Account this this.
        S = np.array([[s[j] if i == j else 0 for j in range(mDim)] for i in range(mDim)])
        Pchol = U @ np.sqrt(S)

        At_draw[t, :] = At.T + (Pchol @ np.random.standard_normal(size=(mDim, 1))).T

    # Common component
    Zt_draw = np.concatenate([np.flip(At_draw[1:3, 1]), At_draw[1:, 0]], axis=0)
    Zt_pred = np.concatenate([np.flip(At_draw[1:3, 1]), At_pred[1:, 0]], axis=0)
    Zt_mat = np.concatenate([np.flip(At_mat[1:3, 1]), At_mat[1:, 0]], axis=0)

    z_t = np.stack([Zt_draw, Zt_mat, Zt_pred], axis=1)

    return loglh, z_t
